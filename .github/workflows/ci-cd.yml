name: CI/CD Pipeline - The Elidoras Codex

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AZURE_WEBAPP_NAME: elidoras-codex
  NODE_VERSION: '18'
  AZURE_RESOURCE_GROUP: tec-${{ github.event.inputs.environment || 'dev' }}

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format -- --check

    - name: TypeScript type check
      run: npm run type-check

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Axiom validation
      run: npm run axiom:validate

    # Upload lint results
    - name: Upload ESLint results
      if: always()
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_TYPESCRIPT_ES: true
        VALIDATE_JAVASCRIPT_ES: true

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_DB: tecdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test -- --coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:test-password@localhost:5432/tecdb_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:test-password@localhost:5432/tecdb_test
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Push Container
  build:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/elidoras-codex
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Infrastructure
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: ./infra/main.bicep
        parameters: >
          ./infra/main.parameters.json
          environmentName=${{ github.event.inputs.environment || 'dev' }}
          containerImageTag=${{ github.sha }}
          openAiApiKey=${{ secrets.AZURE_OPENAI_API_KEY }}
          dbAdminPassword=${{ secrets.DB_ADMIN_PASSWORD }}

    - name: Get deployment outputs
      id: deployment
      run: |
        echo "app-url=$(az deployment group show -g ${{ env.AZURE_RESOURCE_GROUP }} -n main --query properties.outputs.containerAppUrl.value -o tsv)" >> $GITHUB_OUTPUT

    outputs:
      app-url: ${{ steps.deployment.outputs.app-url }}

  # Application Deployment
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Update Container App
      run: |
        az containerapp update \
          --name elidoras-codex-app-* \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}/elidoras-codex:${{ github.sha }}

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60

  # Post-Deployment Tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install test dependencies
      run: npm ci --only=dev

    - name: Run smoke tests
      run: npm run test:smoke
      env:
        APP_URL: ${{ needs.deploy-infrastructure.outputs.app-url }}

    - name: Run Axiom validation tests
      run: npm run test:axioms
      env:
        APP_URL: ${{ needs.deploy-infrastructure.outputs.app-url }}

    - name: Performance tests
      run: npm run test:performance
      env:
        APP_URL: ${{ needs.deploy-infrastructure.outputs.app-url }}

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: deploy-application
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/elidoras-codex:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: ${{ needs.deploy-infrastructure.outputs.app-url }}
        rules_file_name: '.zap/rules.tsv'

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [post-deployment-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify Discord
      if: github.ref == 'refs/heads/main'
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ðŸš€ **The Elidoras Codex** deployed successfully to ${{ github.event.inputs.environment || 'dev' }}!
          
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Environment:** `${{ github.event.inputs.environment || 'dev' }}`
          **App URL:** ${{ needs.deploy-infrastructure.outputs.app-url }}
          
          All axioms validated âœ…
          Security scans passed âœ…
          Performance benchmarks met âœ…

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'prod'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## The Elidoras Codex Release v${{ github.run_number }}
          
          ### Changes
          ${{ github.event.commits[0].message }}
          
          ### Deployment Details
          - **Environment**: Production
          - **Commit**: ${{ github.sha }}
          - **Deployed At**: ${{ github.event.head_commit.timestamp }}
          - **App URL**: ${{ needs.deploy-infrastructure.outputs.app-url }}
          
          ### Axiom Compliance
          All eight foundational axioms have been validated and are functioning correctly.
          
          ### Security Status
          - Container vulnerability scan: âœ… Passed
          - OWASP security scan: âœ… Passed
          - Dependencies audit: âœ… No high-risk vulnerabilities
          
          *"The ultimate power is not the ability to act, but the ability to control the narrative that defines the action."*
        draft: false
        prerelease: false
